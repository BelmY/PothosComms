// Copyright (c) 2020 Nicholas Corgan
// SPDX-License-Identifier: BSL-1.0

#include "common/Testing.hpp"

#include <Pothos/Testing.hpp>
#include <Pothos/Framework.hpp>

#include <cstring>
#include <iostream>
#include <vector>

template <typename T>
static void getTestInputs(
    Pothos::BufferChunk* pInput0,
    Pothos::BufferChunk* pInput1,
    Pothos::BufferChunk* pOutput)
{
    // np.linspace(10,100,100)
    *pInput0 = CommsTests::stdVectorToBufferChunk<T>(
    {
        10.        ,  10.90909091,  11.81818182,  12.72727273,
        13.63636364,  14.54545455,  15.45454545,  16.36363636,
        17.27272727,  18.18181818,  19.09090909,  20.        ,
        20.90909091,  21.81818182,  22.72727273,  23.63636364,
        24.54545455,  25.45454545,  26.36363636,  27.27272727,
        28.18181818,  29.09090909,  30.        ,  30.90909091,
        31.81818182,  32.72727273,  33.63636364,  34.54545455,
        35.45454545,  36.36363636,  37.27272727,  38.18181818,
        39.09090909,  40.        ,  40.90909091,  41.81818182,
        42.72727273,  43.63636364,  44.54545455,  45.45454545,
        46.36363636,  47.27272727,  48.18181818,  49.09090909,
        50.        ,  50.90909091,  51.81818182,  52.72727273,
        53.63636364,  54.54545455,  55.45454545,  56.36363636,
        57.27272727,  58.18181818,  59.09090909,  60.        ,
        60.90909091,  61.81818182,  62.72727273,  63.63636364,
        64.54545455,  65.45454545,  66.36363636,  67.27272727,
        68.18181818,  69.09090909,  70.        ,  70.90909091,
        71.81818182,  72.72727273,  73.63636364,  74.54545455,
        75.45454545,  76.36363636,  77.27272727,  78.18181818,
        79.09090909,  80.        ,  80.90909091,  81.81818182,
        82.72727273,  83.63636364,  84.54545455,  85.45454545,
        86.36363636,  87.27272727,  88.18181818,  89.09090909,
        90.        ,  90.90909091,  91.81818182,  92.72727273,
        93.63636364,  94.54545455,  95.45454545,  96.36363636,
        97.27272727,  98.18181818,  99.09090909, 100.
    });

    // np.linspace(50,100,100)
    *pInput1 = CommsTests::stdVectorToBufferChunk<T>(
    {
        50.        ,  50.50505051,  51.01010101,  51.51515152,
        52.02020202,  52.52525253,  53.03030303,  53.53535354,
        54.04040404,  54.54545455,  55.05050505,  55.55555556,
        56.06060606,  56.56565657,  57.07070707,  57.57575758,
        58.08080808,  58.58585859,  59.09090909,  59.5959596 ,
        60.1010101 ,  60.60606061,  61.11111111,  61.61616162,
        62.12121212,  62.62626263,  63.13131313,  63.63636364,
        64.14141414,  64.64646465,  65.15151515,  65.65656566,
        66.16161616,  66.66666667,  67.17171717,  67.67676768,
        68.18181818,  68.68686869,  69.19191919,  69.6969697 ,
        70.2020202 ,  70.70707071,  71.21212121,  71.71717172,
        72.22222222,  72.72727273,  73.23232323,  73.73737374,
        74.24242424,  74.74747475,  75.25252525,  75.75757576,
        76.26262626,  76.76767677,  77.27272727,  77.77777778,
        78.28282828,  78.78787879,  79.29292929,  79.7979798 ,
        80.3030303 ,  80.80808081,  81.31313131,  81.81818182,
        82.32323232,  82.82828283,  83.33333333,  83.83838384,
        84.34343434,  84.84848485,  85.35353535,  85.85858586,
        86.36363636,  86.86868687,  87.37373737,  87.87878788,
        88.38383838,  88.88888889,  89.39393939,  89.8989899 ,
        90.4040404 ,  90.90909091,  91.41414141,  91.91919192,
        92.42424242,  92.92929293,  93.43434343,  93.93939394,
        94.44444444,  94.94949495,  95.45454545,  95.95959596,
        96.46464646,  96.96969697,  97.47474747,  97.97979798,
        98.48484848,  98.98989899,  99.49494949, 100.
    });

    // scipy.special.beta(np.linspace(10,100,100), np.linspace(50,100,100))
    *pOutput = CommsTests::stdVectorToBufferChunk<T>(
    {
        1.59163801e-12, 2.81500526e-13, 5.24287512e-14, 1.02245255e-14,
        2.07791171e-15, 4.38290724e-16, 9.56183034e-17, 2.15109524e-17,
        4.97716476e-18, 1.18171122e-18, 2.87321206e-19, 7.14117772e-20,
        1.81142762e-20, 4.68270317e-21, 1.23206841e-21, 3.29555050e-22,
        8.95191550e-23, 2.46706406e-23, 6.89191176e-24, 1.95004561e-24,
        5.58438718e-25, 1.61747555e-25, 4.73543935e-26, 1.40053143e-26,
        4.18219112e-27, 1.26031365e-27, 3.83104967e-28, 1.17418316e-28,
        3.62710423e-29, 1.12883141e-29, 3.53828082e-30, 1.11662830e-30,
        3.54687525e-31, 1.13365297e-31, 3.64497676e-32, 1.17863744e-32,
        3.83206922e-33, 1.25243972e-33, 4.11394903e-34, 1.35785336e-34,
        4.50253153e-35, 1.49966069e-35, 5.01635350e-36, 1.68489365e-36,
        5.68172227e-37, 1.92330389e-37, 6.53456369e-38, 2.22807265e-38,
        7.62311033e-39, 2.61681954e-39, 9.01166576e-40, 3.11300204e-40,
        1.07857958e-40, 3.74783865e-41, 1.30594481e-41, 4.56294400e-42,
        1.59847060e-42, 5.61394028e-43, 1.97651662e-43, 6.97541514e-44,
        2.46743240e-44, 8.74774417e-45, 3.10809080e-45, 1.10665052e-45,
        3.94838885e-46, 1.41155062e-46, 5.05609935e-47, 1.81448657e-47,
        6.52361395e-48, 2.34961792e-48, 8.47734214e-49, 3.06376464e-49,
        1.10908491e-49, 4.02132419e-50, 1.46032705e-50, 5.31117274e-51,
        1.93451938e-51, 7.05637747e-52, 2.57751285e-52, 9.42790024e-53,
        3.45310295e-53, 1.26639817e-53, 4.65032696e-54, 1.70976286e-54,
        6.29382399e-55, 2.31956842e-55, 8.55857809e-56, 3.16144930e-56,
        1.16909472e-56, 4.32793877e-57, 1.60387248e-57, 5.94984431e-58,
        2.20942077e-58, 8.21256190e-59, 3.05560273e-59, 1.13795222e-59,
        4.24181018e-60, 1.58259547e-60, 5.90978610e-61, 2.20876069e-61
    });
}

template <typename T>
static void testBeta()
{
    const Pothos::DType dtype(typeid(T));
    std::cout << "Testing " << dtype.toString() << "..." << std::endl;

    Pothos::BufferChunk input0, input1, output;
    getTestInputs<T>(&input0, &input1, &output);

    auto feeder0 = Pothos::BlockRegistry::make("/blocks/feeder_source", dtype);
    feeder0.call("feedBuffer", input0);

    auto feeder1 = Pothos::BlockRegistry::make("/blocks/feeder_source", dtype);
    feeder1.call("feedBuffer", input1);

    auto beta = Pothos::BlockRegistry::make("/comms/beta", dtype);

    auto collector = Pothos::BlockRegistry::make("/blocks/collector_sink", dtype);

    {
        Pothos::Topology topology;

        topology.connect(feeder0, 0, beta, 0);
        topology.connect(feeder1, 0, beta, 1);
        topology.connect(beta, 0, collector, 0);

        topology.commit();
        POTHOS_TEST_TRUE(topology.waitInactive(0.01));
    }

    CommsTests::testBufferChunksClose<T>(
        output,
        collector.call<Pothos::BufferChunk>("getBuffer"),
        T(1e-6));
}

POTHOS_TEST_BLOCK("/comms/tests", test_beta)
{
    testBeta<float>();
    testBeta<double>();
}
